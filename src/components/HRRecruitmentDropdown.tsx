import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { ChevronDown, User, Calculator, Wrench, Scale, Shield } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface RecruitmentPosition {
  id: string;
  title: string;
  description: string;
  icon: any;
  requirements: string[];
}

const positions: RecruitmentPosition[] = [
  {
    id: "business-assistant",
    title: "–ë–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
    description: "–ü–æ–º–æ—â–Ω–∏–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–µ–ª –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
    icon: User,
    requirements: ["–û–ø—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã", "–ó–Ω–∞–Ω–∏–µ MS Office", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"]
  },
  {
    id: "accountant",
    title: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä",
    description: "–í–µ–¥–µ–Ω–∏–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ —É—á–µ—Ç–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏",
    icon: Calculator,
    requirements: ["–í—ã—Å—à–µ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ó–Ω–∞–Ω–∏–µ 1–°", "–û–ø—ã—Ç –æ—Ç 2 –ª–µ—Ç"]
  },
  {
    id: "engineer",
    title: "–ò–Ω–∂–µ–Ω–µ—Ä",
    description: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –∑–∞–¥–∞—á",
    icon: Wrench,
    requirements: ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–û–ø—ã—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–ó–Ω–∞–Ω–∏–µ CAD —Å–∏—Å—Ç–µ–º"]
  },
  {
    id: "lawyer",
    title: "–Æ—Ä–∏—Å—Ç",
    description: "–ü—Ä–∞–≤–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏",
    icon: Scale,
    requirements: ["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–û–ø—ã—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∞", "–ó–Ω–∞–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∞"]
  },
  {
    id: "administrator",
    title: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    description: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Å–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
    icon: Shield,
    requirements: ["–û–ø—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]
  }
];

const HRRecruitmentDropdown = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedPosition, setSelectedPosition] = useState<RecruitmentPosition | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [formData, setFormData] = useState({
    company: "",
    name: "",
    phone: "",
    email: "",
    requirements: "",
    privacyConsent: false,
    dataConsent: false,
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  const handlePositionSelect = (position: RecruitmentPosition) => {
    setSelectedPosition(position);
    setIsOpen(false);
    setIsDialogOpen(true);
    setFormData(prev => ({
      ...prev,
      requirements: position.requirements.join(", ")
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedPosition || !formData.privacyConsent || !formData.dataConsent) return;

    setIsSubmitting(true);
    
    try {
      const { data: contactRequest, error } = await supabase
        .from('contact_requests')
        .insert({
          phone: formData.phone,
          email: formData.email,
          question: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä: ${selectedPosition.title}
–ö–æ–º–ø–∞–Ω–∏—è: ${formData.company}
–ò–º—è: ${formData.name}
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${formData.requirements}`
        })
        .select()
        .single();

      if (error) throw error;

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
      await supabase.functions.invoke('send-telegram-notification', {
        body: {
          requestId: contactRequest.id,
          phone: formData.phone,
          email: formData.email,
          question: `üîç –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞!
          
üìã –ü–æ–∑–∏—Ü–∏—è: ${selectedPosition.title}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${formData.company}
üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: ${formData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üìß Email: ${formData.email}
üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${formData.requirements}`
        }
      });

      toast({
        title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–±–æ—Ä–∞",
      });

      setIsDialogOpen(false);
      setFormData({ company: "", name: "", phone: "", email: "", requirements: "", privacyConsent: false, dataConsent: false });
    } catch (error) {
      console.error('Error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="relative" ref={dropdownRef}>
      <Button
        variant="outline"
        className={`backdrop-blur flex flex-col items-center gap-1 text-xs sm:text-sm whitespace-normal leading-tight h-auto py-2 px-3 hover:bg-muted ${
          isOpen ? 'bg-muted text-muted-foreground' : 'bg-white text-foreground'
        }`}
        onClick={() => setIsOpen(!isOpen)}
      >
        <span>–ü–æ–¥–±–æ—Ä</span>
        <span>—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</span>
        <ChevronDown className={`w-3 h-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </Button>

      {isOpen && (
        <div className="absolute top-full right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border z-50 max-h-96 overflow-y-auto sm:left-0 sm:right-auto">
          <div className="p-2">
            {positions.map((position) => (
              <button
                key={position.id}
                onClick={() => handlePositionSelect(position)}
                className="w-full text-left p-3 hover:bg-gray-50 rounded-md transition-colors flex items-start gap-3"
              >
                <position.icon className="w-5 h-5 text-primary mt-1 flex-shrink-0" />
                <div>
                  <div className="font-medium text-sm">{position.title}</div>
                  <div className="text-xs text-muted-foreground">{position.description}</div>
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              {selectedPosition && <selectedPosition.icon className="w-5 h-5" />}
              –ü–æ–¥–±–æ—Ä: {selectedPosition?.title}
            </DialogTitle>
            <DialogDescription>
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <Label htmlFor="company">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</Label>
              <Input
                id="company"
                value={formData.company}
                onChange={(e) => setFormData(prev => ({ ...prev, company: e.target.value }))}
                required
              />
            </div>
            
            <div>
              <Label htmlFor="name">–í–∞—à–µ –∏–º—è</Label>
              <Input
                id="name"
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                required
              />
            </div>
            
            <div>
              <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
              <Input
                id="phone"
                type="tel"
                value={formData.phone}
                onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                required
              />
            </div>
            
            <div>
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                value={formData.email}
                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                required
              />
            </div>
            
            <div>
              <Label htmlFor="requirements">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</Label>
              <Textarea
                id="requirements"
                value={formData.requirements}
                onChange={(e) => setFormData(prev => ({ ...prev, requirements: e.target.value }))}
                rows={3}
                placeholder="–£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É..."
              />
            </div>
            <div className="space-y-4">
              <div className="flex items-start space-x-2">
                <Checkbox 
                  id="privacy-consent-hr" 
                  checked={formData.privacyConsent}
                  onCheckedChange={(checked) => 
                    setFormData(prev => ({ ...prev, privacyConsent: checked as boolean }))
                  }
                />
                <label htmlFor="privacy-consent-hr" className="text-sm text-muted-foreground cursor-pointer">
                  –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                </label>
              </div>
              
              <div className="flex items-start space-x-2">
                <Checkbox 
                  id="data-consent-hr" 
                  checked={formData.dataConsent}
                  onCheckedChange={(checked) => 
                    setFormData(prev => ({ ...prev, dataConsent: checked as boolean }))
                  }
                />
                <label htmlFor="data-consent-hr" className="text-sm text-muted-foreground cursor-pointer">
                  –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                </label>
              </div>
            </div>
            
            <Button type="submit" className="w-full" disabled={isSubmitting || !formData.privacyConsent || !formData.dataConsent}>
              {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞"}
            </Button>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default HRRecruitmentDropdown;